// Generated by CoffeeScript 1.6.3
(function() {
  define(['app'], function(app) {
    return app.module('bc-angular-directives').directive('bcTable', function() {
      return {
        restrict: 'E',
        replace: true,
        scope: {
          tableConfig: '=',
          headerModel: '=',
          tableModel: '='
        },
        template: '<div>' + '<table ng-class="config.tableClass">' + '<tr>' + '<th ng-repeat="header in headers" ng-style="{width: header.width}" ng-class="header.classNames" ng-click="headerClick(header, $index)">' + '{{header.label}}' + '<span ng-show="header.sortable">' + '<span ng-switch on="currentSort.headerIndex - $index">' + '<span ng-switch-when="0">' + '<i ng-show="currentSort.reverse" class="icon icon-caret-up"></i>' + '<i ng-hide="currentSort.reverse" class="icon icon-caret-down"></i>' + '</span>' + '<span ng-switch-default><i class="icon icon-sort"></i></span>' + '</span>' + '</span>' + '</th>' + '</tr>' + '<tr ng-repeat="line in data | filteredBy:filter.filterKeys:filter.filterValue | orderBy:currentSort.sortingKey:currentSort.reverse | startAt:(currentPage - 1) * pageSize | limitTo:pageSize" ng-click="lineClick(line)" ng-class="{\'clickable-row\': config.lineClick}">' + '<td ng-repeat="header in headers" ng-switch on="line[header.key].type" class="wide middle">' + '<div ng-switch-when="button"><span class="btn" href="#" ng-click="line[header.key].callback(line)" ng-class="line[header.key].classNames" ng-bind-html-unsafe="line[header.key].title"></span></div>' + '<div ng-switch-default ng-bind-html-unsafe="header.format(line[header.key])"></div>' + '</td>' + '</tr>' + '</table>' + '<div class="right" ng-show="showPagination"><pagination total-items="(data | filteredBy:filter.filterKeys:filter.filterValue).length || 1" items-per-page="pageSize" page="currentPage"></pagination></div>' + '</div>',
        link: function(scope, element, attrs) {
          var modelChanged;
          scope.currentSort = {
            headerIndex: -1,
            sortingKey: '',
            reverse: false
          };
          scope.$watch('tableConfig', function() {
            return modelChanged();
          }, true);
          scope.$watch('headerModel', function() {
            return modelChanged();
          }, true);
          scope.$watch('tableModel', function() {
            return modelChanged();
          }, true);
          modelChanged = function() {
            var header, _i, _len, _ref;
            scope.headers = scope.headerModel;
            scope.data = scope.tableModel;
            scope.config = scope.tableConfig;
            scope.filter = exist(scope.config.filter) ? scope.config.filter : {};
            if (exist(scope.config.pagination)) {
              scope.showPagination = true;
              scope.pageSize = scope.config.pagination.pageSize;
              scope.currentPage = scope.config.pagination.currentPage;
            } else {
              scope.showPagination = false;
              scope.pageSize = scope.data.length;
              scope.currentPage = 1;
            }
            _ref = scope.headers;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              header = _ref[_i];
              if (!(exist(header.format) && (type(header.format)) === 'function')) {
                header.format = function(value) {
                  return value;
                };
                continue;
              }
              header.classNames = 'left';
              if (exist(header.sortable)) {
                header.classNames += ' sortable-header';
              }
              if (exist(header.customClass)) {
                header.classNames += ' ' + header.customClass;
              }
            }
          };
          scope.headerClick = function(header, index) {
            if (header.sortable) {
              scope.currentSort.reverse = scope.currentSort.headerIndex === index && !scope.currentSort.reverse;
              scope.currentSort.headerIndex = index;
              return scope.currentSort.sortingKey = header.key;
            }
          };
          return scope.lineClick = function(line) {
            if (exist(scope.config.lineClick)) {
              return scope.config.lineClick(line);
            }
          };
        }
      };
    });
  });

}).call(this);
